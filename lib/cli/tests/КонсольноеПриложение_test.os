#использовать "../src/core"
#Использовать asserts
Перем V, B, S, ARG, SRC;
Перем юТест;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	ИменаТестов = Новый Массив;
	
	ИменаТестов.Добавить("ТестДолжен_ТолькоАргументы");
	//ИменаТестов.Добавить("ТестДолжен_ТолькоОпции");
	//ИменаТестов.Добавить("ТестДолжен_ПроверитьПриложения");
	ИменаТестов.Добавить("ТестДолжен_ПараметрыПеречисленияОпции");
	ИменаТестов.Добавить("ТестДолжен_ПараметрыПеречисленияОпцииВыводHelp");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьВыводВерсииПриложения");
	
	Возврат ИменаТестов;

КонецФункции

Процедура ТестДолжен_ТолькоАргументы() Экспорт

	Приложение = Новый КонсольноеПриложение("cp", "");

	DST = Приложение.Аргумент("DST", "", "Тест");
	SRC = Приложение.Аргумент("SRC", "", "Тест").ТМассивСтрок();;

	Приложение.УстановитьСпек("SRC... DST");
	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);

	МассивSRC = Новый Массив;
	МассивSRC.Добавить("src1");
	МассивSRC.Добавить("src2");

	ВходящиеАргументы = Новый Массив;
	ВходящиеАргументы.Добавить("src1");
	ВходящиеАргументы.Добавить("src2");
	ВходящиеАргументы.Добавить("dst");

	Приложение.Запустить(ВходящиеАргументы);
	
	Утверждения.ПроверитьРавенство(DST.Значение, "dst", "Аргумент DST не равен ожидаемому");
	Утверждения.ПроверитьРавенство(SRC.Значение.Количество(), МассивSRC.Количество(), "Аргумент SRC не равен ожидаемому");


КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыводВерсииПриложения() Экспорт

	Приложение = Новый КонсольноеПриложение("cp", "");
	Приложение.Версия("v version", "1.0");
	ВходящиеАргументы = Новый Массив;
	ВходящиеАргументы.Добавить("-v");
	
	// TODO: При выполнении этого теста происходить завершение тестирования
	// Переписать после написания нормального флоу
	//Приложение.Запустить(ВходящиеАргументы);
	
КонецПроцедуры

Процедура ТестДолжен_ПараметрыПеречисленияОпции() Экспорт
	
	Приложение = Новый КонсольноеПриложение("cp", "");

	enum = Приложение.Опция("enum e", "yellow", "Опция перечисление").ТПеречисление()
			.Перечисление("yellow", "yellow", "Это желтый цвет")
			.Перечисление("red", "red" , "Это красный цвет")
			.Перечисление("blue", "blue", "Это синий цвет")
			;
	
	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);

	ВходящиеАргументы = Новый Массив;
	ВходящиеАргументы.Добавить("-e");
	ВходящиеАргументы.Добавить("yellow");

	Приложение.Запустить(ВходящиеАргументы);
	
	Утверждения.ПроверитьРавенство(enum.Значение, "yellow", "Аргумент enum не равен ожидаемому");

КонецПроцедуры

Процедура ТестДолжен_ПараметрыПеречисленияОпцииВыводHelp() Экспорт
	
	Приложение = Новый КонсольноеПриложение("cp", "");

	enum = Приложение.Опция("enum e", "yellow", "Опция перечисление").ТПеречисление()
			.Перечисление("yellow", "yellow", "Это желтый цвет")
			.Перечисление("red", "rediiii" , "Это красный цвет")
			.Перечисление("blue", "blue", "Это синий цвет")
			;
	
	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);

	ВходящиеАргументы = Новый Массив;
	// ВходящиеАргументы.Добавить("--help");

	ВходящиеАргументы.Добавить("--enum");
	ВходящиеАргументы.Добавить("red");

	Приложение.Запустить(ВходящиеАргументы);
	
	Утверждения.ПроверитьРавенство(enum.Значение, "rediiii", "Аргумент enum не равен ожидаемому");

КонецПроцедуры



Процедура ВыполнитьКоманду(Знач Команда) Экспорт

КонецПроцедуры 

Функция ИмяФункции()
	
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.cli_command");
//Лог.УстановитьУровень(УровниЛога.Отладка);