#использовать "../src/core"
#Использовать asserts
#Использовать logos

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	ИменаТестов = Новый Массив;
	
	ИменаТестов.Добавить("ТестДолжен_ПроверитьЛексерНаРазборТокенов");
	
	Возврат ИменаТестов;

КонецФункции

Процедура ТестДолжен_ПроверитьЛексерНаРазборТокенов() Экспорт
	
	ПроверочныеДанные = ТестовыеСлучаи();
	
	Для каждого КлючЗначение Из ПроверочныеДанные Цикл
		
		Лог.Отладка("Проверяю spec: %1", КлючЗначение.Ключ);
		
		Лексер = Новый Лексер(КлючЗначение.Ключ).Прочитать();
		
		Утверждения.ПроверитьЛожь(Лексер.ЕстьОшибка(), СтрШаблон("Лексер должен отработать успешно. Спек: %1 -- Ошибка: %2", КлючЗначение.Ключ, Лексер.ПолучитьИнформациюОбОшибке()));

		СпекМассив = Лексер.ПолучитьТокены();
		
		Утверждения.ПроверитьРавенство(СпекМассив.Количество(), КлючЗначение.Значение.Количество(), "Набор токенов должен быть одинаковым: "+ КлючЗначение.Ключ);
		
		Утверждения.ПроверитьИстину(СверитьМассивыТокенов(СпекМассив, КлючЗначение.Значение),"Токены не равны " + КлючЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СверитьТокены(ПроверяемыйТокен, ИдеальныйТокен)
	
	Для каждого КлючЗначение Из ИдеальныйТокен Цикл
		
		Если Не КлючЗначение.Значение = ПроверяемыйТокен[КлючЗначение.Ключ] Тогда
			Лог.Отладка("Не равны ключи %1 = %2", КлючЗначение.Значение, ПроверяемыйТокен[КлючЗначение.Ключ]);
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

Функция СверитьМассивыТокенов(ПроверяемыйМассив, ИдеальныйМассив)

	Для ИндексТокена = 0 По ИдеальныйМассив.ВГраница() Цикл

		ИдеальныйТокен = ИдеальныйМассив[ИндексТокена];
		ПроверяемыйТокен = ПроверяемыйМассив[ИндексТокена];
		ТокеныРавны = СверитьТокены(ПроверяемыйТокен, ИдеальныйТокен);
		
		Если НЕ ТокеныРавны Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции


Функция ПравильныйОтвет(Ответ1, Ответ2 = Неопределено, Ответ3 = Неопределено, Ответ4 = Неопределено, Ответ5 = Неопределено, Ответ6 = Неопределено, Ответ7 = Неопределено) 

	Массив = Новый Массив;

	Массив.Добавить(Ответ1);

	Если ЗначениеЗаполнено(Ответ2) Тогда
		Массив.Добавить(Ответ2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответ3) Тогда
		Массив.Добавить(Ответ3);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответ4) Тогда
		Массив.Добавить(Ответ4);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответ5) Тогда
		Массив.Добавить(Ответ5);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответ6) Тогда
		Массив.Добавить(Ответ6);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответ7) Тогда
		Массив.Добавить(Ответ7);
	КонецЕсли;

	Возврат Массив;
	
КонецФункции


Функция ТестовыеСлучаи()

	ПроверочныеДанные = Новый Соответствие;
	
	ПроверочныеДанные.Вставить("XOPTIONS", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "XOPTIONS", 0)));
	ПроверочныеДанные.Вставить("OPTIONSX", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "OPTIONSX", 0)));
	ПроверочныеДанные.Вставить("ARG_EXTRA", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG_EXTRA", 0)));
	ПроверочныеДанные.Вставить("OPTIONS", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTOptions, "OPTIONS", 0)));
	ПроверочныеДанные.Вставить("ОПЦИИ", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTOptions, "ОПЦИИ", 0)));
	ПроверочныеДанные.Вставить("[OPTIONS] ", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptions, "OPTIONS", 1),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 8)
		));
	
	ПроверочныеДанные.Вставить("XANY", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "XANY", 0)));
	ПроверочныеДанные.Вставить("ANYX", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ANYX", 0)));
	ПроверочныеДанные.Вставить("ANY", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTAny, "ANY", 0)));
	ПроверочныеДанные.Вставить("ЛЮБОЙ", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTAny, "ЛЮБОЙ", 0)));
	ПроверочныеДанные.Вставить("[ANY] ", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTAny, "ANY", 1),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 4)
		));

	ПроверочныеДанные.Вставить("ARG1 ARG2", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG1", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 5)));
	ПроверочныеДанные.Вставить("ARG1  ARG2", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG1", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 6)));

	ПроверочныеДанные.Вставить("(", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenPar, "(", 0)));
	ПроверочныеДанные.Вставить(")", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTClosePar, ")", 0)));
	
	ПроверочныеДанные.Вставить("...", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTRep, "...", 0)));
	ПроверочныеДанные.Вставить("ARG...", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTRep, "...", 3)));
	
	ПроверочныеДанные.Вставить("-a...", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-a", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTRep, "...", 2)));
	
	ПроверочныеДанные.Вставить("[-a...]", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-a", 1),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTRep, "...", 3),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 6)
		)	
	);
		
	ПроверочныеДанные.Вставить("|", ПравильныйОтвет(Токены.НовыйТокен(Токены.ТипыТокенов().TTChoice, "|", 0)));
	ПроверочныеДанные.Вставить("ARG1 |ARG2", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG1", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTChoice, "|", 5),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 6)
		)
	);
	ПроверочныеДанные.Вставить("ARG1| ARG2", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG1", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTChoice, "|", 4),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 6)
		)
	);

	ПроверочныеДанные.Вставить("ARG1|ARG2", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG1", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTChoice, "|", 4),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 5)
		)
	);

	ПроверочныеДанные.Вставить("(ARG)", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenPar, "(", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 1),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTClosePar, ")", 4)
		)
	);
	ПроверочныеДанные.Вставить("(-v|-s -b)", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenPar, "(", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-v", 1),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTChoice, "|", 3),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-s", 4),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-b", 7),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTClosePar, ")", 9)
		)
	);

	

	ПроверочныеДанные.Вставить("( ARG )", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenPar, "(", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 2),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTClosePar, ")", 6)
		)
	);

	ПроверочныеДанные.Вставить("[ARG]", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 1),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 4)
		)
	);

	ПроверочныеДанные.Вставить("[ ARG ]", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 2),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 6)
		)
	);

	ПроверочныеДанные.Вставить("ARG [ARG2 ]", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 4),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 5),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 10)
		)
	);

	ПроверочныеДанные.Вставить("ARG [ ARG2]", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOpenSq, "[", 4),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTArg, "ARG2", 6),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTCloseSq, "]", 10)
		)
	);

	ПроверочныеДанные.Вставить("-p", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-p", 0),
		)
	);
	ПроверочныеДанные.Вставить(" -x", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-x", 1),
		)
	);
	ПроверочныеДанные.Вставить("--force", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTLongOpt, "--force", 0),
		)
	);
	ПроверочныеДанные.Вставить("--sig-proxy", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTLongOpt, "--sig-proxy", 0),
		)
	);

	ПроверочныеДанные.Вставить("-aBc", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptSeq, "-aBc", 0),
		)
	);
	ПроверочныеДанные.Вставить("--", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTDoubleDash, "--", 0),
		)
	);
	
	
	ПроверочныеДанные.Вставить("=<bla>", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptValue, "=<bla>", 0),
		)
	);
	
	ПроверочныеДанные.Вставить("=<bla>", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptValue, "=<bla>", 0),
		)
	);
	
	ПроверочныеДанные.Вставить("=<bla-bla>", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptValue, "=<bla-bla>", 0),
		)
	);
	
	ПроверочныеДанные.Вставить("=<bla--bla>", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptValue, "=<bla--bla>", 0),
		)
	);
	
	ПроверочныеДанные.Вставить("-p=<file-path>", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTShortOpt, "-p", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptValue, "=<file-path>", 2),
		)
	);

	ПроверочныеДанные.Вставить("--path=<file-  path>", ПравильныйОтвет(
		Токены.НовыйТокен(Токены.ТипыТокенов().TTLongOpt, "--path", 0),
		Токены.НовыйТокен(Токены.ТипыТокенов().TTOptValue, "=<file-  path>", 6),
		)
	);
	
	Возврат ПроверочныеДанные

КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.cli_lexer");
//Лог.УстановитьУровень(УровниЛога.Отладка);