#Использовать "../../internal"
#Использовать "../../../lib/cli/src/core"

Перем ОписаниеЗапроса; // см. ОписаниеЗапроса
Перем ИсходящиеОшибки; // Массив из Структура:
                       //   * Текст - Строка - Текст ошибки
                       //   * КритичнаяОшибка - Булево - Признак критичиной ошибки 
Перем Генератор; // Объект генератора программного кода
Перем КонсольноеПриложение; // см. КонсольноеПриложение
Перем ОписаниеОпций; // Соответствие
Перем КаталогСохраненияФайлов; // Строка

#Область ПрограммныйИнтерфейс

// Конвертирует команду curl в программный код
//
// Параметры:
//   КоманднаяСтрока - Строка, Массив из Строка - Текст команды, либо массив аргументов
//   ГенераторПрограммногоКода - Объект, Неопределено - Ссылка на класс генератора программного кода
//   Ошибки - Массив, Неопределено - Выходной параметр. Передает обнаруженные при конвертации ошибки:
//      Массив из Структура:
//        * Текст - Строка - Текст ошибки
//        * Критичная - Булево - Признак критичиной ошибки 
//
// Возвращаемое значение:
//   Строка - Программный код
Функция Конвертировать(КоманднаяСтрока, ГенераторПрограммногоКода = Неопределено, Ошибки = Неопределено) Экспорт
	
	Если ГенераторПрограммногоКода = Неопределено Тогда
		Генератор = Новый ГенераторПрограммногоКода1С();
	Иначе
		Генератор = ГенераторПрограммногоКода;
	КонецЕсли;

	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив();
	КонецЕсли;

	ИсходящиеОшибки = Ошибки;

	ПустойРезультат = "";
	Результат = ПустойРезультат;
	
	Если ТипЗнч(КоманднаяСтрока) = Тип("Массив") Тогда
		АргументыКоманд = Новый Массив();
		АргументыКоманд.Добавить(КоманднаяСтрока);
	Иначе
		Парсер = Новый ПарсерКонсольнойКоманды();
		АргументыКоманд = Парсер.Распарсить(КоманднаяСтрока);
	КонецЕсли;

	Если АргументыКоманд.Количество() = 0 Тогда
		Текст = "Передана пустая команда";
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(Текст));
		Возврат ПустойРезультат;
	КонецЕсли;

	НомерКоманды = 0;
	КоличествоКоманд = АргументыКоманд.Количество();
	Для Каждого АргументыКоманды Из АргументыКоманд Цикл

		НомерКоманды = НомерКоманды + 1;
		ОписаниеЗапроса = Новый ОписаниеЗапроса();
		
		ОбработатьАргументыКоманды(АргументыКоманды, НомерКоманды, КоличествоКоманд);

		ПроверитьНаличиеURL(ОписаниеЗапроса);
		ПроверитьПоддержкуПротокола(ОписаниеЗапроса, Генератор.ПоддерживаемыеПротоколы());

		СгенерированныйКод = "";
		Если Не ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
			СгенерированныйКод = Генератор.Получить(ОписаниеЗапроса, ИсходящиеОшибки);
		КонецЕсли;

		ВывестиСгенерированныйКодКоманды(Результат, СгенерированныйКод, НомерКоманды, КоличествоКоманд);

		Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
			Возврат ПустойРезультат;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Получает поддерживаемые опции
//
// Возвращаемое значение:
//   Массив из Строка
Функция ПоддерживаемыеОпции() Экспорт

	ПолучитьКонсольноеПриложение();

	ПоддерживаемыеОпции = Новый Массив();

	Для Каждого КлючЗначение Из ОписаниеОпций Цикл
		ИмяОпции = КлючЗначение.Ключ;
		Описание = КлючЗначение.Значение;
		Если Описание.Поддерживается Тогда
			ПоддерживаемыеОпции.Добавить(ИмяОпции);
		КонецЕсли;
	КонецЦикла;

	Возврат ПоддерживаемыеОпции;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта()

	ОписаниеОпций = Новый Соответствие();

КонецПроцедуры

Процедура ОбработатьКоманду(Команда) Экспорт

	ПрочитатьКаталогСохраненияФайлов(Команда);	
	ПрочитатьАдресаРесурсов(Команда);
	ПрочитатьИменаВыходныхФайлов(Команда);
	ПрочитатьЗаголовки(Команда);
	ПрочитатьПользователя(Команда);
	ПрочитатьДанныеДляОтправки(Команда);
	ПрочитатьМетодЗапроса(Команда);
	ПрочитатьСертификатКлиента(Команда);
	ПрочитатьИспользованиеСертификатыУЦИзХранилищаОС(Команда);
	ПрочитатьИмяФайлаСертификатовУЦ(Команда);
	ПрочитатьПараметрыЗапросаURL(Команда);
	ПрочитатьАдресПрокси(Команда);
	ПрочитатьПользователяПрокси(Команда);
	ПрочитатьТипАутентификацииПрокси(Команда);
	ПрочитатьТаймаут(Команда);
	ПрочитатьТаймаутСоединения(Команда);
	ПрочитатьРежимСоединенияFTP(Команда);
	
	ДополнитьОшибкиНеподдерживаемыеОпции(Команда);

КонецПроцедуры

Процедура ПрочитатьМетодЗапроса(Команда)

	ЕстьДанныеPOST = (ЕстьОпцииГруппыData(Команда) ИЛИ ЕстьОпции(команда, "json"));

	ЕстьМетодGET = ЗначениеОпции(Команда, "get") = Истина;
	ЕстьМетодPOST = ЗначениеОпции(Команда, "get") = Ложь И ЕстьДанныеPOST;
	ЕстьМетодHEAD = ЗначениеОпции(Команда, "head") = Истина;

	Файлы = ЗначениеОпции(Команда, "upload-file");
	КоличествоФайлов = Файлы.Количество();
	НомерРесурса = 0;
	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл
	
		НомерРесурса = НомерРесурса + 1;
		
		Метод = ВРег(ЗначениеОпции(Команда, "X"));
		Если ЗначениеЗаполнено(Метод) Тогда
			ОписаниеРесурса.Метод = Метод;
			Продолжить;
		КонецЕсли;

		ЕстьМетодPUT = НомерРесурса <= КоличествоФайлов;
		
		ОшибочныеМетоды = "";
		Если ЕстьМетодPUT Тогда
			Если ЕстьМетодGET И ЕстьДанныеPOST Тогда
				ОшибочныеМетоды = "PUT и GET";
			ИначеЕсли ЕстьМетодPOST Тогда
				ОшибочныеМетоды = "PUT и POST";
			ИначеЕсли ЕстьМетодHEAD Тогда
				ОшибочныеМетоды = "PUT и HEAD";
			КонецЕсли;
		ИначеЕсли ЕстьМетодPOST Тогда
			Если ЕстьМетодHEAD Тогда
				ОшибочныеМетоды = "POST и HEAD";
			КонецЕсли;
		КонецЕсли;
	
		Если Не ПустаяСтрока(ОшибочныеМетоды) Тогда
			ТекстОшибки = СтрШаблон("Запрещено одновременное использование нескольких HTTP методов %1 для URL %2", 
				ОшибочныеМетоды, ОписаниеРесурса.URL);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			Возврат;
		КонецЕсли;
	
		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		Если ОбщегоНазначения.ЭтоHTTP(СтруктураURL.Схема) Тогда
			Если ЕстьМетодPOST Тогда
				Метод = "POST";
			ИначеЕсли ЕстьМетодPUT Тогда
				Метод = "PUT";
			ИначеЕсли ЕстьМетодHEAD Тогда
				Метод = "HEAD";
			Иначе
				Метод = "GET";
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоFTP(СтруктураURL.Схема) Тогда
			Если Файлы.Количество() Тогда
				Метод = "STOR"; // Залить файл
			ИначеЕсли ЕстьМетодHEAD Тогда
				Метод = "HEAD";
			ИначеЕсли ПоследнееЗначениеОпции(Команда, "list-only") = Истина Тогда
				Метод = "NLST"; // Список имен файлов в директории
			Иначе
				Метод = "RETR"; // Скачать файл
			КонецЕсли;
		КонецЕсли;
	
		ОписаниеРесурса.Метод = Метод;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАдресаРесурсов(Команда)
    
	МассивURL = Новый Массив;
	ОбщегоНазначения.ДополнитьМассив(МассивURL, Команда.ЗначениеАргумента("URL"));
	ОбщегоНазначения.ДополнитьМассив(МассивURL, ЗначениеОпции(Команда, "url"));

	Для Каждого URL Из МассивURL Цикл
		ОписаниеЗапроса.ДобавитьАдресРесурса(URL);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьИменаВыходныхФайлов(Команда)

	ИменаВыходныхФайлов = ЗначениеОпции(Команда, "output");
	ПризнакиИзвлеченияИмениФайлаИзURL = ЗначениеОпции(Команда, "remote-name");
	ИзвлекатьИмяФайлаИзURLДляВсех = ПоследнееЗначениеОпции(Команда, "remote-name-all") = Истина;

	Если ИменаВыходныхФайлов.Количество() И ПризнакиИзвлеченияИмениФайлаИзURL.Количество() Тогда
		ТекстОшибки = "Одновременная передача опций -o (--output) и -O (--remote-name) не поддерживается";
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	// Имя файла из опции
	Индекс = 0;
	Для Каждого ИмяВыходногоФайла Из ИменаВыходныхФайлов Цикл
		Если Индекс > ОписаниеЗапроса.АдресаРесурсов.ВГраница() Тогда
			Прервать;
		КонецЕсли;

		Если ЗначениеЗаполнено(КаталогСохраненияФайлов) Тогда
			ИмяВыходногоФайла = 
				ОбщегоНазначения.ДобавитьКонечныйРазделительПути(КаталогСохраненияФайлов) 
				+ ИмяВыходногоФайла;
		КонецЕсли;

		ОписаниеАдреса = ОписаниеЗапроса.АдресаРесурсов[Индекс];
		ОписаниеАдреса.ИмяВыходногоФайла = ИмяВыходногоФайла;

		Индекс = Индекс + 1;
	КонецЦикла;

	// Имя файла из URL
	Для Индекс = 0 По ОписаниеЗапроса.АдресаРесурсов.ВГраница() Цикл

		ИзвлекатьИмяИзURL = Индекс <= ПризнакиИзвлеченияИмениФайлаИзURL.ВГраница()
			И ПризнакиИзвлеченияИмениФайлаИзURL[Индекс]
			Или ИзвлекатьИмяФайлаИзURLДляВсех;

		Если Не ИзвлекатьИмяИзURL Тогда
			Продолжить;
		КонецЕсли;

		ОписаниеАдреса = ОписаниеЗапроса.АдресаРесурсов[Индекс];
		Если ЗначениеЗаполнено(ОписаниеАдреса.ИмяВыходногоФайла) Тогда
			Продолжить;
		КонецЕсли;

		ПарсерURL = Новый ПарсерURL(ОписаниеАдреса.URL);
		
		ИндексСлеша = СтрНайти(ПарсерURL.Путь, "/", НаправлениеПоиска.СКонца);
		Если ИндексСлеша Тогда
			ИмяВыходногоФайла = СокрЛП(Сред(ПарсерURL.Путь, ИндексСлеша + 1));
		Иначе
			ИмяВыходногоФайла = ПарсерURL.Путь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяВыходногоФайла) Тогда
			ТекстОшибки = СтрШаблон("Не удалось получить имя файла из URL %1", ОписаниеАдреса.URL);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			Возврат;
		КонецЕсли;

		Если ЗначениеЗаполнено(КаталогСохраненияФайлов) Тогда
			ИмяВыходногоФайла = 
				ОбщегоНазначения.ДобавитьКонечныйРазделительПути(КаталогСохраненияФайлов) 
				+ ИмяВыходногоФайла;
		КонецЕсли;

		ОписаниеАдреса.ИмяВыходногоФайла = ИмяВыходногоФайла;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьЗаголовки(Команда)

	Заголовки = РазобратьЗаголовки(Команда);
	Для Каждого Заголовок Из Заголовки Цикл
		ОписаниеЗапроса.ДобавитьЗаголовок(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;

	ДополнитьЗаголовкиJson(Команда);
	ДополнитьЗаголовкиПриНаличииОпцииГруппыData(Команда);
	ДополнитьЗаголовокUserAgent(Команда);
	ДополнитьЗаголовокAuthorizationBearerToken(Команда);

КонецПроцедуры

Процедура ДополнитьЗаголовкиJson(Команда)

	Если Не ЕстьОпции(Команда, "json") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("Content-Type")) Тогда
		ОписаниеЗапроса.ДобавитьЗаголовок("Content-Type", "application/json");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("Accept")) Тогда
		ОписаниеЗапроса.ДобавитьЗаголовок("Accept", "application/json");
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьЗаголовкиПриНаличииОпцииГруппыData(Команда)
	Если ЕстьОпцииГруппыData(Команда)
		И ЗначениеОпции(Команда, "get") = Ложь
		И Не ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("Content-Type")) Тогда
		ОписаниеЗапроса.ДобавитьЗаголовок("Content-Type", "application/x-www-form-urlencoded");
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьЗаголовокUserAgent(Команда)

	UserAgent = ПоследнееЗначениеОпции(Команда, "user-agent");

	Если UserAgent = Неопределено Или СтрДлина(UserAgent) = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОписаниеЗапроса.ЗначениеЗаголовка("User-Agent")) Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(UserAgent) Тогда
		UserAgent = "";
	КонецЕсли;

	ОписаниеЗапроса.ДобавитьЗаголовок("User-Agent", UserAgent);

КонецПроцедуры

Процедура ДополнитьЗаголовокAuthorizationBearerToken(Команда)

	Токен = ПоследнееЗначениеОпции(Команда, "oauth2-bearer");
	
	Если ПустаяСтрока(Токен) Тогда
		Возврат;
	КонецЕсли;

	ОписаниеЗапроса.ДобавитьЗаголовок("Authorization", "Bearer " + Токен);

КонецПроцедуры

Функция РазобратьЗаголовки(Команда)

	Заголовки = Новый Соответствие;
	МассивЗаголовков = ЗначениеОпции(Команда, "H");
	Для Каждого Строка Из МассивЗаголовков Цикл
		Имя = "";
		Значение = "";

		ПозицияДвоеточия = СтрНайти(Строка, ":");
		Если ПозицияДвоеточия Тогда
			Имя = СокрЛП(Сред(Строка, 1, ПозицияДвоеточия - 1));
			Значение = СокрЛП(Сред(Строка, ПозицияДвоеточия + 1));
		Иначе
			Имя = Строка;
		КонецЕсли;

		Заголовки.Вставить(Имя, Значение);
	КонецЦикла;

	Возврат Заголовки;

КонецФункции

Процедура ПрочитатьПользователя(Команда)

	ПользовательИПароль = ЗначениеОпции(Команда, "u");
	МассивПодстрок = СтрРазделить(ПользовательИПароль, ":");

	ОписаниеЗапроса.ИмяПользователя = МассивПодстрок[0];
	Если МассивПодстрок.Количество() = 2 Тогда
		ОписаниеЗапроса.ПарольПользователя = МассивПодстрок[1];
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьДанныеДляОтправки(Команда)

	ПрочитатьData(Команда);
	ПрочитатьDataRaw(Команда);
	ПрочитатьDataBinary(Команда);
	ПрочитатьDataUrlencode(Команда);
	ПрочитатьUploadFile(Команда);
	ПрочитатьОпициюJson(Команда);

КонецПроцедуры

Процедура ПрочитатьData(Команда)

	МассивДанных = ЗначениеОпции(Команда, "d"); // -d, --data
	Назначение = НазначениеПередаваемыхДанныхPOST(Команда);

	Для Каждого Данные Из МассивДанных Цикл

		Если Лев(Данные, 1) = "@" Тогда
			ИмяФайла = Сред(Данные, 2);

			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.УдалятьПереносыСтрок = Истина;
			
			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьDataRaw(Команда)

	МассивДанных = ЗначениеОпции(Команда, "data-raw");
	Назначение = НазначениеПередаваемыхДанныхPOST(Команда);

	Для Каждого Данные Из МассивДанных Цикл
		ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
		ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьDataBinary(Команда)

	МассивДанных = ЗначениеОпции(Команда, "data-binary");
	Назначение = НазначениеПередаваемыхДанныхPOST(Команда);

	Для Каждого Данные Из МассивДанных Цикл		
		Если Лев(Данные, 1) = "@" Тогда
			ИмяФайла = Сред(Данные, 2);
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьDataUrlencode(Команда)

	МассивДанных = ЗначениеОпции(Команда, "data-urlencode");
	Назначение = НазначениеПередаваемыхДанныхPOST(Команда);

	Для Каждого Данные Из МассивДанных Цикл
		ПозицияРавенства = СтрНайти(Данные, "=");
		ПозицияСобачки = СтрНайти(Данные, "@");
		Если ПозицияРавенства > 0 Тогда
			Ключ = Сред(Данные, 1, ПозицияРавенства - 1);
			Значение = Сред(Данные, ПозицияРавенства + 1);
			
			Значение = КодироватьСтроку(Значение, СпособКодированияСтроки.URLВКодировкеURL);
			Если ЗначениеЗаполнено(Ключ) Тогда
				Значение = СтрШаблон("%1=%2", Ключ, Значение);
			КонецЕсли;

			ПередаваемыйТекст = Новый ПередаваемыйТекст(Значение, Назначение);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		ИначеЕсли ПозицияСобачки > 0 Тогда
			Ключ = Сред(Данные, 1, ПозицияСобачки - 1);
			ИмяФайла = СокрЛП(Сред(Данные, ПозицияСобачки + 1));	
			
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.Ключ = Ключ;
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.КодироватьСодержимое = Истина;

			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			Значение = КодироватьСтроку(Данные, СпособКодированияСтроки.URLВКодировкеURL);
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Значение, Назначение);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьUploadFile(Команда)

	МассивДанных = ЗначениеОпции(Команда, "T"); // -T, --upload-file
	ФигурныеСкобки = "{}";
	
	Индекс = -1;
	Для Каждого Значение Из МассивДанных Цикл
		Индекс = Индекс + 1;
		Значение = СокрЛП(Значение);

		Если Индекс > ОписаниеЗапроса.АдресаРесурсов.ВГраница() Тогда
			ТекстОшибки = СтрШаблон("Файл '%1' опции -T, --upload-file было проигнорировано", Значение);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяОшибка(ТекстОшибки));
			Продолжить;
		КонецЕсли;

		ОписаниеРесурса = ОписаниеЗапроса.АдресаРесурсов[Индекс];

		ПервыйСимвол = Лев(Значение, 1);
		ПоследнийСимвол = Прав(Значение, 1);
		
		МассивФайлов = Новый Массив();
		Если ПервыйСимвол = "{" И ПоследнийСимвол = "}" Тогда
			ЗначениеБезСкобок = Сред(Значение, 2, СтрДлина(Значение) - 2);
			МассивФайлов = СтрРазделить(ЗначениеБезСкобок, ",");
		ИначеЕсли СтрНайти(ФигурныеСкобки, ПервыйСимвол) Или СтрНайти(ФигурныеСкобки, ПоследнийСимвол) Тогда
			ТекстОшибки = СтрШаблон("Неправильное использование фигурных скобок в значении '%1' опции -T, --upload-file", Значение);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
			МассивФайлов.Добавить(Значение);
		Иначе
			МассивФайлов.Добавить(Значение);
		КонецЕсли;

		Для Каждого ПутьКФайлу Из МассивФайлов Цикл
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ПутьКФайлу, НазначенияПередаваемыхДанных.ТелоЗапроса);
			ПередаваемыйФайл.ОтправлятьОтдельно = Истина;
			ПередаваемыйФайл.ДобавлятьИмяФайлаКURL = Истина;
			ОписаниеРесурса.Файлы.Добавить(ПередаваемыйФайл);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьОпициюJson(Команда)

	МассивДанных = ЗначениеОпции(Команда, "json");
	Назначение = НазначениеПередаваемыхДанныхPOST(Команда);
	
	Для Каждого Данные Из МассивДанных Цикл

		Если Лев(Данные, 1) = "@" Тогда
			ИмяФайла = Сред(Данные, 2);

			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, Назначение);
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.РазделительТелаЗапроса = "";
			
			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			ПередаваемыйТекст = Новый ПередаваемыйТекст(Данные, Назначение);
			ПередаваемыйТекст.РазделительТелаЗапроса = "";	
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьСертификатКлиента(Команда)

	СертификатКлиента = ПоследнееЗначениеОпции(Команда, "E");

	Если Не ЗначениеЗаполнено(СертификатКлиента) Тогда
		Возврат;
	КонецЕсли;

	ПозицияДвоеточия = СтрНайти(СертификатКлиента, ":");
	Если ПозицияДвоеточия > 0 Тогда
		ОписаниеЗапроса.ИмяФайлаСертификатаКлиента = Сред(СертификатКлиента, 1, ПозицияДвоеточия - 1);
		ОписаниеЗапроса.ПарольСертификатаКлиента = Сред(СертификатКлиента, ПозицияДвоеточия + 1);
	Иначе
		ОписаниеЗапроса.ИмяФайлаСертификатаКлиента = СертификатКлиента;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьИмяФайлаСертификатовУЦ(Команда)

	МассивЗначений = ЗначениеОпции(Команда, "cacert");
	Если МассивЗначений.Количество() Тогда
		ОписаниеЗапроса.ИмяФайлаСертификатовУЦ = МассивЗначений[МассивЗначений.ВГраница()];
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьИспользованиеСертификатыУЦИзХранилищаОС(Команда)

	ОписаниеЗапроса.ИспользоватьСертификатыУЦИзХранилищаОС = ЗначениеОпции(Команда, "ca-native");

КонецПроцедуры

Процедура ПрочитатьПараметрыЗапросаURL(Команда)
    
	МассивДанных = ЗначениеОпции(Команда, "url-query");

	Для Каждого Данные Из МассивДанных Цикл
		
		НачинаетсяСПлюса = Лев(Данные, 1) = "+";
		Если НачинаетсяСПлюса Тогда
			Данные = Сред(Данные, 2);
		КонецЕсли;

		ПозицияРавенства = СтрНайти(Данные, "=");
		ПозицияСобачки = СтрНайти(Данные, "@");
		КодироватьЗначение = Не НачинаетсяСПлюса;

		Если ПозицияРавенства > 0 Тогда
			Ключ = Сред(Данные, 1, ПозицияРавенства - 1);
			ПараметрЗапроса = Сред(Данные, ПозицияРавенства + 1);

			Если КодироватьЗначение Тогда
				ПараметрЗапроса = КодироватьСтроку(ПараметрЗапроса, СпособКодированияСтроки.URLВКодировкеURL);
			КонецЕсли;

			Если ЗначениеЗаполнено(Ключ) Тогда
				ПараметрЗапроса = СтрШаблон("%1=%2", Ключ, ПараметрЗапроса);
			КонецЕсли;

			ПередаваемыйТекст = Новый ПередаваемыйТекст(ПараметрЗапроса, НазначенияПередаваемыхДанных.СтрокаЗапроса);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		ИначеЕсли ПозицияСобачки > 0 И Не НачинаетсяСПлюса Тогда
			Ключ = Сред(Данные, 1, ПозицияСобачки - 1);
			ИмяФайла = СокрЛП(Сред(Данные, ПозицияСобачки + 1));	
			
			ПередаваемыйФайл = Новый ПередаваемыйФайл(ИмяФайла, НазначенияПередаваемыхДанных.СтрокаЗапроса);
			ПередаваемыйФайл.Ключ = Ключ;
			ПередаваемыйФайл.ПрочитатьСодержимое = Истина;
			ПередаваемыйФайл.КодироватьСодержимое = Истина;

			ОписаниеЗапроса.Файлы.Добавить(ПередаваемыйФайл);
		Иначе
			ПараметрЗапроса = Данные;
			Если КодироватьЗначение Тогда
				ПараметрЗапроса = КодироватьСтроку(Данные, СпособКодированияСтроки.URLВКодировкеURL);
			КонецЕсли;

			ПередаваемыйТекст = Новый ПередаваемыйТекст(ПараметрЗапроса, НазначенияПередаваемыхДанных.СтрокаЗапроса);
			ОписаниеЗапроса.ОтправляемыеТекстовыеДанные.Добавить(ПередаваемыйТекст);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьКаталогСохраненияФайлов(Команда)
	КаталогСохраненияФайлов = "";
	Каталог = ПоследнееЗначениеОпции(Команда, "output-dir");
	Если Не Каталог = Неопределено Тогда
		КаталогСохраненияФайлов = Каталог;
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьАдресПрокси(Команда)

	АдресПрокси = ПоследнееЗначениеОпции(Команда, "proxy");
	Если Не ЗначениеЗаполнено(АдресПрокси) Тогда
		Возврат;
	КонецЕсли;

	ПарсерURL = Новый ПарсерURL(АдресПрокси);

	ОписаниеЗапроса.ПроксиСервер = ПарсерURL.Сервер;
	
	ОписаниеЗапроса.ПроксиПротокол = НРег(ПарсерURL.Схема);
	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ПроксиПротокол) Тогда
		ОписаниеЗапроса.ПроксиПротокол = ПротоколыURL.HTTP;
	КонецЕсли;

	ОписаниеЗапроса.ПроксиПорт = ПарсерURL.Порт;
	Если Не ЗначениеЗаполнено(ОписаниеЗапроса.ПроксиПорт) Тогда
		ОписаниеЗапроса.ПроксиПорт = 1080;	
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьПользователяПрокси(Команда)

	СтрокаПользователя = ПоследнееЗначениеОпции(Команда, "proxy-user");
	Если Не ЗначениеЗаполнено(СтрокаПользователя) Тогда
		Возврат;
	КонецЕсли;

	ИндексДвоеточия = СтрНайти(СтрокаПользователя, ":");
	Если ИндексДвоеточия > 0 Тогда
		ОписаниеЗапроса.ПроксиПользователь = Сред(СтрокаПользователя, 1, ИндексДвоеточия - 1);
		ОписаниеЗапроса.ПроксиПароль = Сред(СтрокаПользователя, ИндексДвоеточия + 1);
	Иначе
		ОписаниеЗапроса.ПроксиПользователь = СтрокаПользователя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьТипАутентификацииПрокси(Команда)

	Если ПоследнееЗначениеОпции(Команда, "proxy-ntlm") = Истина Тогда
		ОписаниеЗапроса.ТипАутентификацииПрокси = ТипыАутентификацииПрокси.NTLM;
	Иначе
		ОписаниеЗапроса.ТипАутентификацииПрокси = ТипыАутентификацииПрокси.Basic;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьТаймаут(Команда)

	Таймаут = ПоследнееЗначениеОпции(Команда, "max-time");
	Если Не Таймаут = Неопределено Тогда
		ОписаниеЗапроса.Таймаут = Таймаут;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьТаймаутСоединения(Команда)

	ТаймаутСоединения = ПоследнееЗначениеОпции(Команда, "connect-timeout");
	Если Не ТаймаутСоединения = Неопределено Тогда
		ОписаниеЗапроса.ТаймаутСоединения = ТаймаутСоединения;
	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьРежимСоединенияFTP(Команда)

	АдресДляОбратногоСоединения = ПоследнееЗначениеОпции(Команда, "ftp-port");
	АдресПрокси = ПоследнееЗначениеОпции(Команда, "proxy");

	Если ЗначениеЗаполнено(АдресДляОбратногоСоединения) И Не ЗначениеЗаполнено(АдресПрокси) Тогда
		ОписаниеЗапроса.FTPАдресОбратногоСоединения = АдресДляОбратногоСоединения;
		ОписаниеЗапроса.FTPПассивныйРежимСоединения = Ложь;
	Иначе
		ОписаниеЗапроса.FTPПассивныйРежимСоединения = Истина;
	КонецЕсли;

КонецПроцедуры

Функция НазначениеПередаваемыхДанныхPOST(Команда)
	Если ЗначениеОпции(Команда, "get") = Истина Тогда
		Возврат НазначенияПередаваемыхДанных.СтрокаЗапроса;
	Иначе
		Возврат НазначенияПередаваемыхДанных.ТелоЗапроса;
	КонецЕсли;
КонецФункции

Функция ПолучитьКонсольноеПриложение()

	Если Не КонсольноеПриложение = Неопределено Тогда
		Возврат КонсольноеПриложение;
	КонецЕсли;

	КонсольноеПриложение = Новый КонсольноеПриложение("curl", "", ЭтотОбъект);
	КонсольноеПриложение.УстановитьСпек("[ANY]");	
	КонсольноеПриложение.УстановитьОсновноеДействие(ЭтотОбъект, "ОбработатьКоманду");

	КонсольноеПриложение.Аргумент("URL", "", "Адрес ресурса").ТМассивСтрок();

	// Поддерживаемые
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("url", "", "URL").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("H header", "", "HTTP заголовок").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("X request", "", "Метод запроса").ТСтрока();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("u user", "", "Пользователь и пароль").ТСтрока();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("d data data-ascii", "", "Передаваемые данные по HTTP POST").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("data-raw", "", "Передаваемые данные по HTTP POST без интерпретации символа @").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("data-binary", "", "Передаваемые двоичные данные по HTTP POST").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("data-urlencode", "", "Передаваемые данные по HTTP POST с URL кодированием").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("T upload-file", "", "Загружаемый файл").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("G get", Ложь, "Данные из опций -d и--data-... добавляются в URL как строка запроса").Флаговый();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("I head", Ложь, "Получение заголовков").Флаговый();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("E cert", "", "Сертификат клиента").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("ca-native", Ложь, "Использование сертификатов УЦ из системного хранилища сертификатов операционной системы").Флаговый();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("cacert", "", "Файл сертификатов удостоверяющих центров").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("url-query", "", "Параметры строки запроса URL").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("o output", "", "Имя выходного файла").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("output-dir", "", "Каталог сохранения файлов").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("O remote-name", "", "Извлечение имени выходного файла из URL").ТМассивБулево();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("remote-name-all", "", "Извлечение имени выходного файла для всех URL").ТМассивБулево();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("x proxy", "", "Прокси").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("U proxy-user", "", "Пользователь прокси").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("proxy-basic", "", "Использовать HTTP Basic-аутентификация прокси").ТМассивБулево();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("proxy-ntlm", "", "Использовать NTLM-аутентификацию").ТМассивБулево();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("m max-time", 0, "Максимальное время ожидания на выполнение запроса").ТМассивЧисел();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("connect-timeout", 0, "Максимальное время ожидания на попытку соединения к хосту").ТМассивЧисел();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("json", "", "Данные JSON").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("A user-agent", "", "HTTP заголовок запроса User-Agent").ТМассивСтрок();		
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("oauth2-bearer", "", "Bearer-token").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("ftp-pasv", , "Использование пассивного режима ftp-соединения").ТМассивБулево();		
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("P ftp-port", "", "Использование активного режима ftp-соединения").ТМассивСтрок();
	ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение("l list-only").ТМассивБулево();

	// Неподдерживаемые
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("abstract-unix-socket").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("alt-svc").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("anyauth").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("a append").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("aws-sigv4").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("basic").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("capath").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("cert-status").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("cert-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("compressed").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("compressed-ssh").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("K config").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("connect-to").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("C continue-at").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("b cookie").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("c cookie-jar").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("create-dirs").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("create-file-mode").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("crlf").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("crlfile").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("curves").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("delegation").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("digest").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("q disable").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("disable-eprt").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("disable-epsv").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("disallow-username-in-url").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("dns-interface").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("dns-ipv4-addr").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("dns-ipv6-addr").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("dns-servers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("doh-cert-status").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("doh-insecure").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("doh-url").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("dump-ca-embed").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("D dump-header").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ech").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("egd-file").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("engine").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("etag-compare").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("etag-save").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("expect100-timeout").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("f fail").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("fail-early").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("fail-with-body").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("false-start").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("F form").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("form-escape").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("form-string").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-account").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-alternative-to-user").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-create-dirs").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-method").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-pret").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-skip-pasv-ip").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-ssl-ccc").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-ssl-ccc-mode").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ftp-ssl-control").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("g globoff").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("happy-eyeballs-timeout-ms").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("haproxy-clientip").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("haproxy-protocol").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("h help").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("hostpubmd5").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("hostpubsha256").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("hsts").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("http0.9").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("0 http1.0").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("http1.1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("http2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("http2-prior-knowledge").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("http3").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("http3-only").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ignore-content-length").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("k insecure").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("interface").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ip-tos").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ipfs-gateway").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("4 ipv4").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("6 ipv6").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("j junk-session-cookies").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("keepalive-cnt").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("keepalive-time").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("key").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("key-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("krb").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("libcurl").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("limit-rate").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("local-port").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("L location").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("location-trusted").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("login-options").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("mail-auth").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("mail-from").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("mail-rcpt").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("mail-rcpt-allowfails").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("M manual").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("max-filesize").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("max-redirs").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("metalink").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("mptcp").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("negotiate").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("n netrc").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("netrc-file").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("netrc-optional").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("no-alpn").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("N no-buffer").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("no-clobber").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("no-keepalive").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("no-npn").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("no-progress-meter").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("no-sessionid").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("noproxy").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ntlm").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ntlm-wb").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("Z parallel").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("parallel-immediate").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("parallel-max").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("pass").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("path-as-is").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("pinnedpubkey").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("post301").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("post302").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("post303").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("preproxy").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proto").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proto-default").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proto-redir").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-anyauth").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-ca-native").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-cacert").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-capath").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-cert").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-cert-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-crlfile").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-digest").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-header").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-http2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-insecure").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-key").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-key-type").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-negotiate").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-pass").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-pinnedpubkey").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-service-name").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-ssl-allow-beast").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-ssl-auto-client-cert").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-tls13-ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-tlsauthtype").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-tlspassword").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-tlsuser").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy-tlsv1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("proxy1.0").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("p proxytunnel").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("pubkey").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("Q quote").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("random-file").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("r range").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("rate").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("raw").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("e referer").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("J remote-header-name").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("R remote-time").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("remove-on-error").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("request-target").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("resolve").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("retry").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("retry-all-errors").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("retry-connrefused").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("retry-delay").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("retry-max-time").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("sasl-authzid").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("sasl-ir").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("service-name").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("S show-error").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("i show-headers").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("s silent").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("skip-existing").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks4").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks4a").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks5").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks5-basic").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks5-gssapi").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks5-gssapi-nec").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks5-gssapi-service").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("socks5-hostname").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("Y speed-limit").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("y speed-time").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ssl").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ssl-allow-beast").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ssl-auto-client-cert").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ssl-no-revoke").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ssl-reqd").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("ssl-revoke-best-effort").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("2 sslv2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("3 sslv3").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("stderr").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("styled-output").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("suppress-connect-headers").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tcp-fastopen").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tcp-nodelay").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("t telnet-option").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tftp-blksize").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tftp-no-options").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("z time-cond").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tls-earlydata").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tls-max").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tls13-ciphers").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlsauthtype").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlspassword").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlsuser").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("1 tlsv1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlsv1.0").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlsv1.1").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlsv1.2").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tlsv1.3").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("tr-encoding").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("trace").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("trace-ascii").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("trace-config").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("trace-ids").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("trace-time").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("unix-socket").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("B use-ascii").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("variable").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("v verbose").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("V version").ТМассивБулево();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("vlan-priority").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("w write-out").ТМассивСтрок();
	ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение("xattr").ТМассивБулево();				

	Возврат КонсольноеПриложение;

КонецФункции

Функция ДобавитьНеподдерживаемуюОпциюВКонсольноеПриложение(Наименования)
	Возврат ДобавитьОпциюВКонсольноеПриложение(Наименования, Ложь);
КонецФункции

Функция ДобавитьПоддерживаемуюОпциюВКонсольноеПриложение(Наименования, ЗначениеПоУмолчанию = "", Описание = "")
	Возврат ДобавитьОпциюВКонсольноеПриложение(Наименования, Истина,  ЗначениеПоУмолчанию, Описание);
КонецФункции

Функция ДобавитьОпциюВКонсольноеПриложение(Наименования, Поддерживается, ЗначениеПоУмолчанию = "", Описание = "")
	Опция = КонсольноеПриложение.Опция(Наименования, ЗначениеПоУмолчанию, Описание);
	
	Описание = Новый Структура();
	Описание.Вставить("Поддерживается", Поддерживается);
	Описание.Вставить("Наименования", Новый Массив());

	Для Каждого Имя Из СтрРазделить(Наименования, " ") Цикл 
		Наименование = ?(СтрДлина(Имя) = 1, "-", "--") + Имя;
		Описание.Наименования.Добавить(Наименование);
		ОписаниеОпций.Вставить(Имя, Описание);
	КонецЦикла;

	Возврат Опция;
КонецФункции

Функция ЕстьОпции(Команда, Опции)
	Для Каждого Опция Из СтрРазделить(Опции, ",") Цикл
		Если ЗначениеЗаполнено(ЗначениеОпции(Команда, Опция)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ЕстьОпцииГруппыData(Команда)
	Возврат ЕстьОпции(Команда, "d,data,data-raw,data-binary,data-urlencode,data-ascii");
КонецФункции

Функция ПоследнееЗначениеОпции(Команда, ИмяОпции)
	МассивЗначений = ЗначениеОпции(Команда, ИмяОпции);
	Если ТипЗнч(МассивЗначений) = Тип("Массив") И МассивЗначений.Количество() Тогда
		Возврат МассивЗначений[МассивЗначений.ВГраница()];
	КонецЕсли;
КонецФункции

Функция ЗначениеОпции(Команда, ИмяОпции)
	Возврат Команда.ЗначениеОпции(ИмяОпции);
КонецФункции

Процедура ОбработатьАргументыКоманды(АргументыКоманды, НомерКоманды, КоличествоКоманд)

	ПроверитьЧтоКомандаНачинаетсяСCurl(АргументыКоманды, НомерКоманды, КоличествоКоманд);
		
	АргументыКоманды.Удалить(0); // Удаляем curl

	Попытка
		Приложение = ПолучитьКонсольноеПриложение();
		Команда = Приложение.ПолучитьКоманду();
		Команда.УстановитьДействиеВывестиСправку(ЭтотОбъект, "Заглушка");
		Приложение.Запустить(АргументыКоманды);
	Исключение
		ОбработатьИсключениеЗапускаКонсольногоПриложения(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьИсключениеЗапускаКонсольногоПриложения(ИнформацияОбОшибке)

	Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	// Неожидаемая опция
	ПодстрокаПоиска = "Неожидаемая опция";
	Инд = СтрНайти(Текст, ПодстрокаПоиска);
	Если Инд Тогда
		Опция = СокрЛП(Сред(Текст, Инд + СтрДлина(ПодстрокаПоиска)));
		ТекстОшибки = СтрШаблон("Опция %1 неизвестна", Опция);
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	// Опция должна содержать значение
	ПодстрокаПоиска = "должна содержать значение";
	Инд = СтрНайти(Текст, ":");
	Если СтрНайти(Текст, ПодстрокаПоиска) И Инд Тогда
		ТекстОшибки = СокрЛП(Сред(Текст, Инд + 1));
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(Текст));

КонецПроцедуры

Процедура ДополнитьОшибкиНеподдерживаемыеОпции(Команда)

	ПоддерживаемыеОпцииГенератора = Новый Соответствие();
	
	Для Каждого ИмяОпции Из Генератор.ПоддерживаемыеОпции() Цикл
		Префикс = ?(СтрДлина(ИмяОпции) = 1, "-", "--");
		ПоддерживаемыеОпцииГенератора.Вставить(Префикс + ИмяОпции, Истина);
	КонецЦикла;

	ПроверенныеОпции = Новый Соответствие();
	Для Каждого КлючЗначение Из ОписаниеОпций Цикл
		
		Описание = КлючЗначение.Значение;	
		Наименование = Описание.Наименования[0];

		ПоддерживаетсяГенератором = ПоддерживаемыеОпцииГенератора[Наименование] = Истина;
		Если Описание.Поддерживается И ПоддерживаетсяГенератором Тогда
			Продолжить;
		КонецЕсли;

		Если ПроверенныеОпции[Наименование] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПроверенныеОпции.Вставить(Наименование, Истина);

		Значение = Команда.ЗначениеОпции(Наименование);
		Если ЗначениеЗаполнено(Значение) Тогда
			ТекстОшибки = СтрШаблон("Опция %1 не поддерживается", СтрСоединить(Описание.Наименования, ", "));
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяОшибка(ТекстОшибки));
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЧтоКомандаНачинаетсяСCurl(АргументыКоманды, НомерКоманды, КоличествоКоманд)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	Если Не (НРег(АргументыКоманды[0]) = "curl") Тогда
		
		НомерКомандыТекст = ?(КоличествоКоманд > 1, СтрШаблон("#%1 ", НомерКоманды), "");

		Текст = СтрШаблон("Команда %1должна начинаться с ""curl"", но вместо этого начинается с %2", 
			НомерКомандыТекст, 
			АргументыКоманды[0]);

		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(Текст));

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНаличиеURL(ОписаниеЗапроса)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	Если ОписаниеЗапроса.АдресаРесурсов.Количество() = 0 Тогда
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка("Не указан URL"));
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПоддержкуПротокола(ОписаниеЗапроса, ПоддерживаемыеПротоколы)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл
		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		Если ПоддерживаемыеПротоколы.Найти(СтруктураURL.Схема) = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Протокол ""%1"" не поддерживается", СтруктураURL.Схема);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));		
		КонецЕсли;
 	КонецЦикла;

КонецПроцедуры

Процедура ВывестиРазделительКоманд(Результат, НомерКоманды, КоличествоКоманд)

	Если КоличествоКоманд = 1 Тогда
		Возврат;
	КонецЕсли;

	Результат = Результат
		+ ?(НомерКоманды > 1, Символы.ПС + Символы.ПС, "")
		+ СтрШаблон(
			"////////////////////////////////////////////// 
			|// Команда #%1.", НомерКоманды);

КонецПроцедуры

Процедура ВывестиСгенерированныйКодКоманды(Результат, Код, НомерКоманды, КоличествоКоманд)
	
	Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
		Возврат;
	КонецЕсли;

	ВывестиРазделительКоманд(Результат, НомерКоманды, КоличествоКоманд);

	Результат = Результат 
		+ ?(Результат = "", "", Символы.ПС + Символы.ПС)
		+ Код;

КонецПроцедуры

// Используется для отключения вывода справки cli
Процедура Заглушка(Значение = Неопределено) Экспорт
	
КонецПроцедуры

#КонецОбласти