#Использовать "../../internal"

Перем Конструктор; // см. КонструкторПрограммногоКода
Перем ИсходящиеОшибки; // Массив из Структура:
                       //   * Текст - Строка - Текст ошибки
                       //   * КритичнаяОшибка - Булево - Признак критичиной ошибки 
Перем ОписаниеЗапроса; // см. ОписаниеЗапроса

Перем ПрочитанныеФайлы; // Массив из Структура:
                        //   - ПередаваемыйФайл - см. ПередаваемыйФайл
                        //   - ИмяПеременной - Строка
Перем ВызванМетодПоТекущемуURL; // Булево
Перем ТелоЗапросаСтрока; // Строка
Перем МетодУстановкиТелаЗапроса; // Строка

Перем ИмяПараметраЗаголовки;  // Строка
Перем ИмяПараметраСоединение; // Строка
Перем ИмяПараметраЗащищенноеСоединение; // Строка
Перем ИмяПараметраHTTPЗапрос; // Строка
Перем ИмяПараметраHTTPОтвет; // Строка
Перем ИмяПараметраПрокси; // Строка
Перем ИмяПараметраТелоЗапросаСтрока; // Строка

#Область ПрограммныйИнтерфейс

// Генерирует программный код 1С из переданного описания запроса
//
// Параметры:
//   Описание - см. ОписаниеЗапроса - Описание запроса
//   Ошибки - Неопределено - Выходной параметр. Передает обнаруженные при конвертации ошибки:
//      Массив из Структура:
//        * Текст - Строка - Текст ошибки
//        * Критичная - Булево - Признак критичиной ошибки 
//
// Возвращаемое значение:
//   Строка - Программный код
Функция Получить(Описание, Ошибки = Неопределено) Экспорт

	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив();
	КонецЕсли;

	ОписаниеЗапроса = Описание;
	ИсходящиеОшибки = Ошибки;
	Конструктор = Новый КонструкторПрограммногоКода();
	
	ПрочитанныеФайлы.Очистить();
	
	ОпределитьМетодУстановкиТелаЗапроса();
	ДобавитьЗаголовки();
	ДобавитьЧтениеФайлов();
	ДобавитьДанныеЗапроса();
	ДобавитьЗащищенноеСоединение();
	ДобавитьПрокси();
	ДобавитьЗапросы();

	Возврат Конструктор.ПолучитьРезультат();

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПоддерживаемыеОпции() Экспорт

	ПоддерживаемыеОпции = "url
	|H
	|header
	|X
	|request
	|u
	|user
	|d
	|data
	|data-ascii
	|data-raw
	|data-binary
	|data-urlencode
	|T
	|upload-file
	|G
	|get
	|I
	|head
	|E
	|cert
	|ca-native
	|cacert
	|url-query
	|o
	|output
	|output-dir
	|O
	|remote-name
	|remote-name-all
	|x
	|proxy
	|U
	|proxy-user
	|proxy-basic
	|proxy-ntlm
	|m
	|max-time
	|connect-timeout
	|json
	|A
	|user-agent
	|oauth2-bearer
	|ftp-pasv
	|P
	|ftp-port
	|l
	|list-only";

	Возврат СтрРазделить(ПоддерживаемыеОпции, Символы.ПС, Ложь);

КонецФункции

Функция ПоддерживаемыеПротоколы() Экспорт
	Протоколы = Новый Массив();
	Протоколы.Добавить(ПротоколыURL.HTTP);
	Протоколы.Добавить(ПротоколыURL.HTTPS);
	Протоколы.Добавить(ПротоколыURL.FTP);
	Протоколы.Добавить(ПротоколыURL.FTPS);
	Возврат Протоколы;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта()

	ИмяПараметраЗаголовки = "Заголовки";
	ИмяПараметраСоединение = "Соединение";
	ИмяПараметраЗащищенноеСоединение = "ЗащищенноеСоединение";
	ИмяПараметраHTTPЗапрос = "HTTPЗапрос";
	ИмяПараметраHTTPОтвет = "HTTPОтвет";
	ИмяПараметраПрокси = "Прокси";
	ИмяПараметраТелоЗапросаСтрока = "ТелоЗапроса";

	ПрочитанныеФайлы = Новый Массив();

КонецПроцедуры

Процедура ДобавитьЗаголовки()
	
	Если Не ОписаниеЗапроса.Заголовки.Количество() Тогда
		Возврат;
	КонецЕсли;

	Конструктор.ДобавитьСтроку("%1 = Новый Соответствие();", ИмяПараметраЗаголовки);

	Для Каждого Заголовок Из ОписаниеЗапроса.Заголовки Цикл
		ПараметрыФункции = Новый Массив();
		ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(Заголовок.Ключ));
		ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(Заголовок.Значение));

		Конструктор.ДобавитьСтроку("%1.Вставить(%2);",
			ИмяПараметраЗаголовки, 
			Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЧтениеФайлов()
	
	ТребуетсяЧтениеФайловТелаЗапроса = Не МетодУстановкиТелаЗапроса = "ИзФайла";

	ФайлыДляЧтения = Новый Массив();
	Для Каждого ПередаваемыйФайл Из ОписаниеЗапроса.Файлы Цикл

		Если Не (ПередаваемыйФайл.ПрочитатьСодержимое 
			Или ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.СтрокаЗапроса) Тогда
			Продолжить;
		КонецЕсли;

		Если ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса
			И Не ТребуетсяЧтениеФайловТелаЗапроса Тогда
			Продолжить;
		КонецЕсли;

		ФайлыДляЧтения.Добавить(ПередаваемыйФайл);

	КонецЦикла;

	Код = КоллекцияПрограммногоКода.ЧтениеТекстовыхФайлов(ФайлыДляЧтения, ПрочитанныеФайлы);

	Если Не ПустаяСтрока(Код) Тогда
		Конструктор
			.ДобавитьПустуюСтроку()
			.ДобавитьСтроку(Код);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДанныеЗапроса()

	ТелоЗапросаСтрока = "";
	ТелоЗапроса = КоллекцияПрограммногоКода.СборкаДанныхЗапросаВСтроку(
		НазначенияПередаваемыхДанных.ТелоЗапроса,
		ОписаниеЗапроса.ОтправляемыеТекстовыеДанные, 
		ПрочитанныеФайлы);

	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Если СтрЧислоСтрок(ТелоЗапроса) = 1 Тогда
			ТелоЗапросаСтрока = ТелоЗапроса;
		Иначе
			Конструктор
				.ДобавитьПустуюСтроку()
				.ДобавитьСтроку("%1 = %2;", ИмяПараметраТелоЗапросаСтрока, ТелоЗапроса);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЗащищенноеСоединение()
	
	ИспользуетсяЗащищенноеСоединение = Ложь;

	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл		
		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		ИспользуетсяЗащищенноеСоединение = ИспользуетсяЗащищенноеСоединение(СтруктураURL);
		Если ИспользуетсяЗащищенноеСоединение Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ИспользуетсяЗащищенноеСоединение Тогда
		Возврат;
	КонецЕсли;

	Конструктор.ДобавитьПустуюСтроку();

	// Сертификат клиента
	ИмяПараметраСертификатаКлиента = "";
	Если ЗначениеЗаполнено(ОписаниеЗапроса.ИмяФайлаСертификатаКлиента) Тогда
		ИмяПараметраСертификатаКлиента = "СертификатКлиента";

		ПараметрыФункции = Новый Массив;
		ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(ОписаниеЗапроса.ИмяФайлаСертификатаКлиента));
		ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ПарольСертификатаКлиента));

		Конструктор.ДобавитьСтроку("%1 = Новый СертификатКлиентаФайл(%2);", 
			ИмяПараметраСертификатаКлиента, 
			Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));
	КонецЕсли;

	// Сертификаты УЦ
	ИмяПараметраСертификатыУдостоверяющихЦентров = "СертификатыУдостоверяющихЦентров";
	Если ОписаниеЗапроса.ИспользоватьСертификатыУЦИзХранилищаОС Тогда
		Конструктор.ДобавитьСтроку("%1 = Новый СертификатыУдостоверяющихЦентровОС();", 
			ИмяПараметраСертификатыУдостоверяющихЦентров);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗапроса.ИмяФайлаСертификатовУЦ) Тогда
		Конструктор.ДобавитьСтроку("%1 = Новый СертификатыУдостоверяющихЦентровФайл(%2);", 
			ИмяПараметраСертификатыУдостоверяющихЦентров,
			Конструктор.ПараметрВСтроку(ОписаниеЗапроса.ИмяФайлаСертификатовУЦ));		
	Иначе
		ИмяПараметраСертификатыУдостоверяющихЦентров = "";
	КонецЕсли;

	// Защищенное соединение
	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(ИмяПараметраСертификатаКлиента);
	ПараметрыФункции.Добавить(ИмяПараметраСертификатыУдостоверяющихЦентров);
	
	Конструктор.ДобавитьСтроку("%1 = Новый ЗащищенноеСоединениеOpenSSL(%2);", 
		ИмяПараметраЗащищенноеСоединение,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));
	
КонецПроцедуры

Процедура ДобавитьПрокси()

	Если Не ОписаниеЗапроса.ИспользуетсяПрокси() Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ПротоколПроксиПоддерживатся(ОписаниеЗапроса.ПроксиПротокол) Тогда
		ТекстОшибки = СтрШаблон("Прокси протокол %1 не поддерживается", ОписаниеЗапроса.ПроксиПротокол);
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
		Возврат;
	КонецЕсли;

	Конструктор
		.ДобавитьПустуюСтроку()
		.ДобавитьСтроку(КоллекцияПрограммногоКода.СозданиеИнтернетПрокси(ОписаниеЗапроса, ИмяПараметраПрокси));

КонецПроцедуры

Процедура ДобавитьЗапросы()

	МаксимальнаяДлинаАдресаВКомментарии = 100;

	КоличествоURL = ОписаниеЗапроса.АдресаРесурсов.Количество();
	НомерЗапроса = 0;

	Для Каждого ОписаниеРесурса Из ОписаниеЗапроса.АдресаРесурсов Цикл
		
		НомерЗапроса = НомерЗапроса + 1;
		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		ВызванМетодПоТекущемуURL = Ложь;

		Конструктор.ДобавитьПустуюСтроку();

		Если КоличествоURL > 1 Тогда
			Конструктор.ДобавитьКомментарий("Запрос %1. %2", 
				НомерЗапроса, 
				Лев(ОписаниеРесурса.URL, МаксимальнаяДлинаАдресаВКомментарии));
		КонецЕсли;

		Если ОбщегоНазначения.ЭтоHTTP(СтруктураURL.Схема) Тогда

			ДобавитьHTTPСоединение(СтруктураURL);
			ДобавитьПоследовательнуюОтправкуФайлов(ОписаниеРесурса);

			Если Не ВызванМетодПоТекущемуURL Тогда
				ДобавитьHTTPЗапрос(СтруктураURL);
				ДобавитьУстановкуТелаЗапроса(ОписаниеРесурса);				
				ДобавитьВызовHTTPМетода(ОписаниеРесурса);
			КонецЕсли;

		ИначеЕсли ОбщегоНазначения.ЭтоFTP(СтруктураURL.Схема) Тогда

			ДобавитьFTPСоединение(СтруктураURL);
			ДобавитьВызовFTPМетода(ОписаниеРесурса, СтруктураURL);

		Иначе

			ТекстОшибки = СтрШаблон("Протокол ""%1"" не поддерживается", СтруктураURL.Схема);
			ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));

		КонецЕсли;

		Если ОбщегоНазначения.ЕстьКритичныеОшибки(ИсходящиеОшибки) Тогда
			Конструктор.Очистить();
			Возврат;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПоследовательнуюОтправкуФайлов(ОписаниеРесурса)

	ДлинаИмениФайлаВКомментарии = 100;

	ВсеФайлы = Новый Массив();
	ОбщегоНазначения.ДополнитьМассив(ВсеФайлы, ОписаниеЗапроса.Файлы);
	ОбщегоНазначения.ДополнитьМассив(ВсеФайлы, ОписаниеРесурса.Файлы);

	ПередаваемыеФайлы = Новый Массив();
	Для Каждого ПередаваемыйФайл Из ВсеФайлы Цикл

		Если ПередаваемыйФайл.ОтправлятьОтдельно 
			И Не ПередаваемыйФайл.ПрочитатьСодержимое 
			И ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса Тогда
			ПередаваемыеФайлы.Добавить(ПередаваемыйФайл);
		КонецЕсли;

	КонецЦикла;

	КоличествоФайлов = ПередаваемыеФайлы.Количество();
	НомерФайла = 0;
	Для Каждого ПередаваемыйФайл Из ПередаваемыеФайлы Цикл

		НомерФайла = НомерФайла + 1;

		Если КоличествоФайлов > 1 Тогда
			ИмяФайла = Лев(ПередаваемыйФайл.ИмяФайла, ДлинаИмениФайлаВКомментарии);
			Конструктор
				.ДобавитьПустуюСтроку()
				.ДобавитьКомментарий("Передача файла %1. %2", НомерФайла, ИмяФайла);
		КонецЕсли;

		СтруктураURL = Новый ПарсерURL(ОписаниеРесурса.URL);
		Если ПередаваемыйФайл.ДобавлятьИмяФайлаКURL Тогда
			СтруктураURL.Путь = ОбщегоНазначения.ДополнитьИменемФайлаПутьURL(ПередаваемыйФайл.ИмяФайла, СтруктураURL.Путь);
		КонецЕсли;

		ДобавитьHTTPЗапрос(СтруктураURL);

		Конструктор.ДобавитьСтроку("%1.УстановитьИмяФайлаТела(%2);", 
			ИмяПараметраHTTPЗапрос, 
			Конструктор.ПараметрВСтроку(ПередаваемыйФайл.ИмяФайла));

		ДобавитьВызовHTTPМетода(ОписаниеРесурса);

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьHTTPСоединение(СтруктураURL)

	Таймаут = 0;
	Если ЗначениеЗаполнено(ОписаниеЗапроса.Таймаут) И ЗначениеЗаполнено(ОписаниеЗапроса.ТаймаутСоединения) Тогда
		Таймаут = ОписаниеЗапроса.Таймаут + ОписаниеЗапроса.ТаймаутСоединения;
	КонецЕсли;

	ИспользуетсяЗащищенноеСоединение = ИспользуетсяЗащищенноеСоединение(СтруктураURL);

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(СтруктураURL.Сервер));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ПолучитьПорт(СтруктураURL)));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ИмяПользователя));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ПарольПользователя));
	ПараметрыФункции.Добавить(?(ОписаниеЗапроса.ИспользуетсяПрокси(), ИмяПараметраПрокси, ""));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(Таймаут));
	ПараметрыФункции.Добавить(?(ИспользуетсяЗащищенноеСоединение, ИмяПараметраЗащищенноеСоединение, ""));

	Конструктор.ДобавитьСтроку("%1 = Новый HTTPСоединение(%2);",
		ИмяПараметраСоединение,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

КонецПроцедуры

Процедура ДобавитьHTTPЗапрос(СтруктураURL)

	ПараметрыФункции = Новый Массив;
	
	АдресРесурсаКод = КоллекцияПрограммногоКода.СборкаАдресаРесурса(СтруктураURL, 
		ОписаниеЗапроса.ОтправляемыеТекстовыеДанные, 
		ПрочитанныеФайлы);

	Если ПустаяСтрока(АдресРесурсаКод) Тогда
		ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку("/"));
	ИначеЕсли СтрЧислоСтрок(АдресРесурсаКод) > 1 Тогда
		Конструктор
			.ДобавитьПустуюСтроку()
			.ДобавитьСтроку("АдресРесурса = %1;", АдресРесурсаКод);
		ПараметрыФункции.Добавить("АдресРесурса");
	Иначе
		ПараметрыФункции.Добавить(АдресРесурсаКод);
	КонецЕсли;

	Если ОписаниеЗапроса.Заголовки.Количество() Тогда
		ПараметрыФункции.Добавить(ИмяПараметраЗаголовки);
	КонецЕсли;

	Конструктор.ДобавитьСтроку("%1 = Новый HTTPЗапрос(%2);", 
		ИмяПараметраHTTPЗапрос,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

КонецПроцедуры

Процедура ДобавитьВызовHTTPМетода(ОписаниеРесурса)

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(ОписаниеРесурса.Метод));
	ПараметрыФункции.Добавить(ИмяПараметраHTTPЗапрос);
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеРесурса.ИмяВыходногоФайла));

	Конструктор
		.ДобавитьПустуюСтроку()
		.ДобавитьСтроку("%1 = %2.ВызватьHTTPМетод(%3);", 
			ИмяПараметраHTTPОтвет,
			ИмяПараметраСоединение,
			Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

	ВызванМетодПоТекущемуURL = Истина;

КонецПроцедуры

Процедура ДобавитьУстановкуТелаЗапроса(ОписаниеРесурса)

	ДобавитьУстановкуТелаЗапросаТекстовымиДанными();
	ДобавитьУстановкуТелаЗапросаИзФайла(ОписаниеРесурса);

КонецПроцедуры

Процедура ДобавитьУстановкуТелаЗапросаТекстовымиДанными()
	
	Если Не МетодУстановкиТелаЗапроса = "ИзСтроки" Тогда
		Возврат;
	КонецЕсли;

	Конструктор.ДобавитьСтроку("%1.УстановитьТелоИзСтроки(%2);",
		ИмяПараметраHTTPЗапрос,
		?(ЗначениеЗаполнено(ТелоЗапросаСтрока), ТелоЗапросаСтрока, ИмяПараметраТелоЗапросаСтрока));

КонецПроцедуры

Процедура ДобавитьУстановкуТелаЗапросаИзФайла(ОписаниеРесурса)

	Если Не МетодУстановкиТелаЗапроса = "ИзФайла" Тогда
		Возврат;
	КонецЕсли;

	Файлы = Новый Массив();
	ОбщегоНазначения.ДополнитьМассив(Файлы, ОписаниеЗапроса.Файлы);
	ОбщегоНазначения.ДополнитьМассив(Файлы, ОписаниеРесурса.Файлы);

	ЭтоПервыйФайл = Истина;
	Для Каждого ПередаваемыйФайл Из Файлы Цикл

		Если ПередаваемыйФайл.ОтправлятьОтдельно
			Или Не ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса
			Или ПередаваемыйФайлПрочитан(ПередаваемыйФайл) Тогда
			Продолжить;
		КонецЕсли;

		Конструктор.ДобавитьСтроку("%1%2.УстановитьИмяФайлаТела(%3);", 
			?(ЭтоПервыйФайл, "", "// "),
			ИмяПараметраHTTPЗапрос, 
			Конструктор.ПараметрВСтроку(ПередаваемыйФайл.ИмяФайла));

		ЭтоПервыйФайл = Ложь;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьFTPСоединение(СтруктураURL)

	Если ЗначениеЗаполнено(ОписаниеЗапроса.FTPАдресОбратногоСоединения)
		И Не ОписаниеЗапроса.FTPАдресОбратногоСоединения = "-" Тогда
		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяОшибка("Адрес из опции -P, --ftp-port было проигнорировано"));
	КонецЕсли;

	Таймаут = 0;
	Если ЗначениеЗаполнено(ОписаниеЗапроса.Таймаут) И ЗначениеЗаполнено(ОписаниеЗапроса.ТаймаутСоединения) Тогда
		Таймаут = ОписаниеЗапроса.Таймаут + ОписаниеЗапроса.ТаймаутСоединения;
	КонецЕсли;

	ИспользуетсяЗащищенноеСоединение = ИспользуетсяЗащищенноеСоединение(СтруктураURL);

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(СтруктураURL.Сервер));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ПолучитьПорт(СтруктураURL)));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ИмяПользователя));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(ОписаниеЗапроса.ПарольПользователя));
	ПараметрыФункции.Добавить(?(ОписаниеЗапроса.ИспользуетсяПрокси(), ИмяПараметраПрокси, ""));
	ПараметрыФункции.Добавить(?(ОписаниеЗапроса.FTPПассивныйРежимСоединения, Истина, ""));
	ПараметрыФункции.Добавить(Конструктор.НеобязательныйПараметрВСтроку(Таймаут));
	ПараметрыФункции.Добавить(?(ИспользуетсяЗащищенноеСоединение, ИмяПараметраЗащищенноеСоединение, ""));

	Конструктор.ДобавитьСтроку("%1 = Новый FTPСоединение(%2);", 
		ИмяПараметраСоединение,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

КонецПроцедуры

Процедура ДобавитьВызовFTPМетода(ОписаниеРесурса, СтруктураURL)

	Конструктор.ДобавитьПустуюСтроку();

	Если ОписаниеРесурса.Метод = "RETR" Тогда
		ВывестиВызовПолученияФайлаFTP(ОписаниеРесурса, СтруктураURL);
	ИначеЕсли ОписаниеРесурса.Метод = "STOR" Тогда
		ВывестиВызовОтправкиФайлаFTP(ОписаниеРесурса, СтруктураURL);
	ИначеЕсли ОписаниеРесурса.Метод = "NLST" Тогда
		ВывестиПолучениеСпискаФайловВДиректорииFTP(СтруктураURL);
	ИначеЕсли ОписаниеРесурса.Метод = "HEAD" Тогда
		ВывестиПолучениеЗаголовковФайлаFTP(СтруктураURL);
	Иначе
		Если ЗначениеЗаполнено(ОписаниеРесурса.Метод) Тогда
			ТекстОшибки = СтрШаблон("FTP метод '%1' не поддерживается", ОписаниеРесурса.Метод);
		Иначе
			ТекстОшибки = "Не определен FTP метод";
		КонецЕсли;

		ИсходящиеОшибки.Добавить(ОбщегоНазначения.НоваяКритичнаяОшибка(ТекстОшибки));
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиВызовПолученияФайлаFTP(ОписаниеРесурса, СтруктураURL)

	ИмяВыходногоФайла = ?(ЗначениеЗаполнено(ОписаниеРесурса.ИмяВыходногоФайла), 
		ОписаниеРесурса.ИмяВыходногоФайла, 
		"path/to/file");

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(СтруктураURL.Путь));
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(ИмяВыходногоФайла));

	Конструктор.ДобавитьСтроку("%1.Получить(%2);", 
		ИмяПараметраСоединение,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

КонецПроцедуры

Процедура ВывестиВызовОтправкиФайлаFTP(ОписаниеРесурса, СтруктураURL)

	Для Каждого ПередаваемыйФайл Из ОписаниеРесурса.Файлы Цикл
		Если Не ПередаваемыйФайл.ОтправлятьОтдельно Тогда
			Продолжить;
		КонецЕсли;

		Если ПередаваемыйФайл.ДобавлятьИмяФайлаКURL Тогда
			АдресРесурса = ОбщегоНазначения.ДополнитьИменемФайлаПутьURL(ПередаваемыйФайл.ИмяФайла, СтруктураURL.Путь);
		Иначе
			АдресРесурса = СтруктураURL.Путь;
		КонецЕсли;

		ПараметрыФункции = Новый Массив;
		ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(ПередаваемыйФайл.ИмяФайла));
		ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(АдресРесурса));

		Конструктор.ДобавитьСтроку("%1.Записать(%2);", 
			ИмяПараметраСоединение,
			Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиПолучениеСпискаФайловВДиректорииFTP(СтруктураURL)

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(СтруктураURL.Путь));
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку("*"));

	Конструктор.ДобавитьСтроку("Файлы = %1.НайтиФайлы(%2);", 
		ИмяПараметраСоединение,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

КонецПроцедуры

Процедура ВывестиПолучениеЗаголовковФайлаFTP(СтруктураURL)

	ПараметрыФункции = Новый Массив;
	ПараметрыФункции.Добавить(Конструктор.ПараметрВСтроку(СтруктураURL.Путь));

	Конструктор.ДобавитьСтроку("Файл = %1.НайтиФайлы(%2)[0];", 
		ИмяПараметраСоединение,
		Конструктор.ПараметрыФункцииВСтроку(ПараметрыФункции));

КонецПроцедуры

Функция ИспользуетсяЗащищенноеСоединение(СтруктураURL)
	Возврат СтруктураURL.Схема = ПротоколыURL.HTTPS 
		Или СтруктураURL.Схема = ПротоколыURL.FTPS
		Или ЗначениеЗаполнено(ОписаниеЗапроса.ИмяФайлаСертификатаКлиента);
КонецФункции

Функция ПередаваемыйФайлПрочитан(ПередаваемыйФайл)

	Если Не ПередаваемыйФайл.ПрочитатьСодержимое Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого ПрочитанныйФайл Из ПрочитанныеФайлы Цикл
		Если ПрочитанныйФайл.ПередаваемыйФайл = ПередаваемыйФайл Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

Процедура ОпределитьМетодУстановкиТелаЗапроса()

	КоличествоФайлов = 0;
	Для Каждого ПередаваемыйФайл Из ОписаниеЗапроса.Файлы Цикл
		Если ПередаваемыйФайл.ПрочитатьСодержимое 
			И ПередаваемыйФайл.Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса Тогда
			КоличествоФайлов = КоличествоФайлов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьТекстовоеТелоЗапроса = Ложь;
	Для Каждого ПередаваемыйТекст Из ОписаниеЗапроса.ОтправляемыеТекстовыеДанные Цикл
		Если ПередаваемыйТекст.Назначение = НазначенияПередаваемыхДанных.ТелоЗапроса Тогда
			ЕстьТекстовоеТелоЗапроса = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если КоличествоФайлов > 1 Или ЕстьТекстовоеТелоЗапроса Тогда
		МетодУстановкиТелаЗапроса = "ИзСтроки";
	ИначеЕсли КоличествоФайлов = 1 И Не ЕстьТекстовоеТелоЗапроса Тогда
		МетодУстановкиТелаЗапроса = "ИзФайла";
	Иначе
		МетодУстановкиТелаЗапроса = "";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПорт(СтруктураURL)

	Порт = СтруктураURL.Порт;
	Если Не ЗначениеЗаполнено(Порт) Тогда
		Если СтруктураURL.Схема = ПротоколыURL.HTTPS Тогда
			Порт = 443;
		ИначеЕсли СтруктураURL.Схема = ПротоколыURL.HTTP Тогда
			Порт = 80;
		ИначеЕсли СтруктураURL.Схема = ПротоколыURL.FTPS Тогда
			Порт = 990;
		ИначеЕсли СтруктураURL.Схема = ПротоколыURL.FTP Тогда
			Порт = 21;
		КонецЕсли;
	КонецЕсли;

	Возврат Порт;

КонецФункции

#КонецОбласти