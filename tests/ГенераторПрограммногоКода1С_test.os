#Использовать asserts
#Использовать ".."

Перем юТест;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;
	
	СписокТестов = Новый Массив;
	
	СписокТестов.Добавить("ТестДолжен_ПроверитьЗаголовки");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИнициализациюЗаголовковТолькоОдинРаз");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуМетода");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуПользователя");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуТекстовыхДанных");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИнициализациюТелаЗапросаТолькоОдинРаз");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуТекстовыхДанныхСКодированием");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуДвоичныхДанныхDataBinary");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуДвоичныхДанныхUploadFile");
	СписокТестов.Добавить("ТестДолжен_ПроверитьНеизменностьПереданногоЗаголовкаContentType");
	СписокТестов.Добавить("ТестДолжен_ПроверитьМножественноеИспользованиеUrl");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуОтправляемыхДанныхВСтрокуЗапроса");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуОтправляемыхДанныхВСтрокуЗапросаИзФайла");
	СписокТестов.Добавить("ТестДолжен_ПроверитьВставкуОтправляемыхДанныхВСтрокуЗапроса");
	СписокТестов.Добавить("ТестДолжен_ПроверитьHTTPМетодHEAD");
	СписокТестов.Добавить("ТестДолжен_ПроверитьОбработкуНесколькихКоманд");
	СписокТестов.Добавить("ТестДолжен_ПроверитьОтсутствиеИспользованияЗащищенногоСоединения");
	СписокТестов.Добавить("ТестДолжен_ПроверитьНаличиеИспользованияЗащищенногоСоединения");	
	СписокТестов.Добавить("ТестДолжен_ПроверитьИнициализациюЗащищенногоСоединенияТолькоОдинРаз");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИспользованиеЗащищенногоСоединенияПриНаличииHTTPSиHTTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаСПаролем");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаБезПароля");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзОС");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзФайла");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуПараметровЗапроса");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуПараметровЗапросаТолькоИзФайла");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПереданноеИмяВыходногоФайла");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПереданныеИменаВыходныхФайлов");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИзвлечениеИмениВыходногоФайлаИзURL");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИзвлечениеИмениВыходногоФайлаДляВсехURL");
	СписокТестов.Добавить("ТестДолжен_ПроверитьВыбрасываниеИсключенияПриИзвлеченииИмениВыходногоФайлаИзURL");
	СписокТестов.Добавить("ТестДолжен_ПроверитьКаталогСохраненияФайловИПереданноеИмяФайла");
	СписокТестов.Добавить("ТестДолжен_ПроверитьКаталогСохраненияФайловИИзвлеченноеИмяФайлаИзURL");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПрокси");
	СписокТестов.Добавить("ТестДолжен_ПроверитьИнициализациюПроксиТолькоОдинРаз");
	СписокТестов.Добавить("ТестДолжен_ПроверитьАутентификациюПроксиBasic");
	СписокТестов.Добавить("ТестДолжен_ПроверитьАутентификациюПроксиNTLM");	
	СписокТестов.Добавить("ТестДолжен_ПроверитьВыбрасываниеИсключенияКогдаПроксиПротоколНеПоддерживается");	
	СписокТестов.Добавить("ТестДолжен_ПроверитьТаймаут");	
	СписокТестов.Добавить("ТестДолжен_ПроверитьОтсутствиеТаймаутаЕслиНеУстановленыОбаТаймаута");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуJsonИзФайлов");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуJsonИзСтроки");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуJsonИзНесколькихСтрок");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуJsonИзСтрокиИФайла");
	СписокТестов.Добавить("ТестДолжен_ПроверитьUserAgent");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПробелыВUserAgent");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПустойUserAgent");
	СписокТестов.Добавить("ТестДолжен_ПроверитьОтсутстивиеЗамещенияUserAgent");
	СписокТестов.Добавить("ТестДолжен_ПроверитьBearerToken");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеПоFTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПолучениеПоFTPS");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПередачуПользователяFTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПроксиFTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПассивныйРежимСоединенияFTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьАктивныйРежимСоединенияFTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьПредупреждениеИгнорированиеАдресаОбратногоСоединенияFTP");
	СписокТестов.Добавить("ТестДолжен_ПроверитьОдновременнуюПередачуАктивногоИПассивногоРежимаСоединенияFTP");
	
	Возврат СписокТестов;
	
КонецФункции

Процедура ТестДолжен_ПроверитьЗаголовки() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|  -H 'accept: text/html' \
	|  -H 'accept-language: ru,en-US;q=0.9,en;q=0.8' \
	|  -H 'user-agent: curl'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|Заголовки.Вставить(""accept-language"", ""ru,en-US;q=0.9,en;q=0.8"");
	|Заголовки.Вставить(""user-agent"", ""curl"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИнициализациюЗаголовковТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl example1.com/page1 example2.com/page2 \
	|  -H 'accept: text/html";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""accept"", ""text/html"");
	|
	|// Запрос 1. example1.com/page1
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page1"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. example2.com/page2
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page2"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуМетода() Экспорт

	КонсольнаяКоманда = "curl http://example.com -X POST";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуПользователя() Экспорт

	КонсольнаяКоманда = "curl http://example.com -u user:secret";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80, ""user"", ""secret"");
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуТекстовыхДанных() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	-d param1=value1 \
	|	--data-ascii 'парам2=значение2' \
	|	--data 'param3=value3' \
	|	--data @path-to-file1 \
	|	--data @path-to-file2 \
	|	--data-raw '@at@at@'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file1"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ВК, """");
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file2"");
	|ТекстовыеДанныеИзФайла_2 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_2 = СтрЗаменить(ТекстовыеДанныеИзФайла_2, Символы.ПС, """");
	|ТекстовыеДанныеИзФайла_2 = СтрЗаменить(ТекстовыеДанныеИзФайла_2, Символы.ВК, """");
	|
	|ТелоЗапроса = ""param1=value1&парам2=значение2&param3=value3&@at@at@""
	|	+ ""&"" + ТекстовыеДанныеИзФайла_1
	|	+ ""&"" + ТекстовыеДанныеИзФайла_2;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИнициализациюТелаЗапросаТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com http://example2.com \
	|	-d param=value \
	|	--data @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ВК, """");
	|
	|ТелоЗапроса = ""param=value""
	|	+ ""&"" + ТекстовыеДанныеИзФайла_1;
	|
	|// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуДвоичныхДанныхDataBinary() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--data-binary @path-to-file1 \
	|	--data-binary @path-to-file2";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file1"");
	|// HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file2"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуДвоичныхДанныхUploadFile() Экспорт

	КонсольнаяКоманда = "curl http://example.com --upload-file path-to-file";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""PUT"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНеизменностьПереданногоЗаголовкаContentType() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	-H 'Content-Type: application/octet-stream' \
	|	--data-binary @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/octet-stream"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьИмяФайлаТела(""path-to-file"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуТекстовыхДанныхСКодированием() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--data-urlencode name=val \
	|	--data-urlencode =encodethis& \
	|	--data-urlencode name@file \
	|	--data-urlencode @fileonly";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/x-www-form-urlencoded"");
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = КодироватьСтроку(ТекстовыеДанныеИзФайла_1, СпособКодированияСтроки.URLВКодировкеURL);
	|ТекстовыеДанныеИзФайла_1 = ""name="" + ТекстовыеДанныеИзФайла_1;
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""fileonly"");
	|ТекстовыеДанныеИзФайла_2 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_2 = КодироватьСтроку(ТекстовыеДанныеИзФайла_2, СпособКодированияСтроки.URLВКодировкеURL);
	|
	|ТелоЗапроса = ""name=val&encodethis%26""
	|	+ ""&"" + ТекстовыеДанныеИзФайла_1
	|	+ ""&"" + ТекстовыеДанныеИзФайла_2;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМножественноеИспользованиеUrl() Экспорт

	КонсольнаяКоманда = "curl http://example1.com \
	|	http://example2.com \
	|	--url http://example3.com \
	|	--url http://example4.com";

	ПрограммныйКод = "// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 3. http://example3.com
	|Соединение = Новый HTTPСоединение(""example3.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 4. http://example4.com
	|Соединение = Новый HTTPСоединение(""example4.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуОтправляемыхДанныхВСтрокуЗапроса() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--get \
	|	-d 'param1=value' \
	|	--data 'param2=value2' \
	|	--data @path-to-file";

	ПрограммныйКод = "ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ВК, """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""/?param1=value&param2=value2""
	|	+ ""&"" + ТекстовыеДанныеИзФайла_1;
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуОтправляемыхДанныхВСтрокуЗапросаИзФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--get \
	|	--data @path-to-file";

	ПрограммныйКод = "ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ВК, """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""/?""
	|	+ ТекстовыеДанныеИзФайла_1;
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВставкуОтправляемыхДанныхВСтрокуЗапроса() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com?param3=value3#page-1' \
	|	--get \
	|	-d 'param1=value' \
	|	--data 'param2=value2' \
	|	--data @path-to-file";

	ПрограммныйКод = "ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ПС, """");
	|ТекстовыеДанныеИзФайла_1 = СтрЗаменить(ТекстовыеДанныеИзФайла_1, Символы.ВК, """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""/?param3=value3&param1=value&param2=value2""
	|	+ ""&"" + ТекстовыеДанныеИзФайла_1 
	|	+ ""#page-1"";
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьHTTPМетодHEAD() Экспорт

	КонсольнаяКоманда = "
	|curl http://example1.com --head
	|curl http://example2.com -X HEAD";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""HEAD"", HTTPЗапрос);
	|
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""HEAD"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОбработкуНесколькихКоманд() Экспорт

	КонсольнаяКоманда = "curl http://example1.com & curl http://example2.com";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|Соединение = Новый HTTPСоединение(""example2.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтсутствиеИспользованияЗащищенногоСоединения() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com'";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНаличиеИспользованияЗащищенногоСоединения() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com'";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИнициализациюЗащищенногоСоединенияТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl https://example1.com https://example2.com";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|// Запрос 1. https://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. https://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИспользованиеЗащищенногоСоединенияПриНаличииHTTPSиHTTP() Экспорт

	КонсольнаяКоманда = "curl http://example1.com https://example2.com";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. https://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаСПаролем() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' -E certfile.pem:secret";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"", ""secret"");
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаБезПароля() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"");
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзОС() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem --ca-native";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"");
	|СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровОС();
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры


Процедура ТестДолжен_ПроверитьИспользованиеСертификатаКлиентаИСертификатыУЦИзФайла() Экспорт

	КонсольнаяКоманда = "curl 'https://example.com' --cert certfile.pem --cacert CA-file.txt";

	ПрограммныйКод = "СертификатКлиента = Новый СертификатКлиентаФайл(""certfile.pem"");
	|СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровФайл(""CA-file.txt"");
	|ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиента, СертификатыУдостоверяющихЦентров);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 443, , , , , ЗащищенноеСоединение);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуПараметровЗапроса() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--url-query name=val \
	|	--url-query =encodethis& \
	|	--url-query name@file \
	|	--url-query @fileonly \
	|	--url-query '+name=%20foo' \
	|	--url-query +@not-a-file";

	ПрограммныйКод = "ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = КодироватьСтроку(ТекстовыеДанныеИзФайла_1, СпособКодированияСтроки.URLВКодировкеURL);
	|ТекстовыеДанныеИзФайла_1 = ""name="" + ТекстовыеДанныеИзФайла_1;
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""fileonly"");
	|ТекстовыеДанныеИзФайла_2 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_2 = КодироватьСтроку(ТекстовыеДанныеИзФайла_2, СпособКодированияСтроки.URLВКодировкеURL);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""/?name=val&encodethis%26&name=%20foo&@not-a-file""
	|	+ ""&"" + ТекстовыеДанныеИзФайла_1
	|	+ ""&"" + ТекстовыеДанныеИзФайла_2;
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуПараметровЗапросаТолькоИзФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com --url-query @fileonly";

	ПрограммныйКод = "ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""fileonly"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|ТекстовыеДанныеИзФайла_1 = КодироватьСтроку(ТекстовыеДанныеИзФайла_1, СпособКодированияСтроки.URLВКодировкеURL);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|
	|АдресРесурса = ""/?""
	|	+ ТекстовыеДанныеИзФайла_1;
	|HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПереданноеИмяВыходногоФайла() Экспорт

	КонсольнаяКоманда = "curl http://example.com -o file.html";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""file.html"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПереданныеИменаВыходныхФайлов() Экспорт

	КонсольнаяКоманда = "curl \
	|	http://example.com/page1.html -o page1.html \
	|	http://example.com/page2.html --output page2.html";

	ПрограммныйКод = "// Запрос 1. http://example.com/page1.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page1.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""page1.html"");
	|
	|// Запрос 2. http://example.com/page2.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/page2.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""page2.html"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИзвлечениеИмениВыходногоФайлаИзURL() Экспорт

	КонсольнаяКоманда = "curl \
	|	http://example.com/about.html -O \
	|	http://example.com/catalog/cars.html --remote-name \
	|	http://example.com/index.html";

	ПрограммныйКод = "// Запрос 1. http://example.com/about.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""about.html"");
	|
	|// Запрос 2. http://example.com/catalog/cars.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/catalog/cars.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""cars.html"");
	|
	|// Запрос 3. http://example.com/index.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/index.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИзвлечениеИмениВыходногоФайлаДляВсехURL() Экспорт

	КонсольнаяКоманда = "curl --remote-name-all \
	|	http://example.com/about.html -o file.html \
	|	http://example.com/catalog/cars.html \
	|	http://example.com/index.html";

	ПрограммныйКод = "// Запрос 1. http://example.com/about.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""file.html"");
	|
	|// Запрос 2. http://example.com/catalog/cars.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/catalog/cars.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""cars.html"");
	|
	|// Запрос 3. http://example.com/index.html
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/index.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""index.html"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыбрасываниеИсключенияПриИзвлеченииИмениВыходногоФайлаИзURL() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -O";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();

	Параметры = Новый Массив;
	Параметры.Добавить(КонсольнаяКоманда);
	Параметры.Добавить(Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(КонвертерКомандыCURL)
           .Метод("Конвертировать", Параметры)
           .ВыбрасываетИсключение("Не удалось получить имя файла из URL");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКаталогСохраненияФайловИПереданноеИмяФайла() Экспорт

	КаталогСохраненияОС = СтрЗаменить("/some/path", "/", ПолучитьРазделительПути());

	КонсольнаяКоманда = "curl http://example.com/about.html -o file.html --output-dir '/some/path'";
	КонсольнаяКоманда = СтрЗаменить(КонсольнаяКоманда, "/some/path", КаталогСохраненияОС);

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/file.html"");";
	ПрограммныйКод = СтрЗаменить(ПрограммныйКод, "/some/path/", КаталогСохраненияОС + ПолучитьРазделительПути());

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКаталогСохраненияФайловИИзвлеченноеИмяФайлаИзURL() Экспорт

	КаталогСохраненияОС = СтрЗаменить("/some/path", "/", ПолучитьРазделительПути());

	КонсольнаяКоманда = "curl http://example.com/about.html -O --output-dir '/some/path'";
	КонсольнаяКоманда = СтрЗаменить(КонсольнаяКоманда, "/some/path", КаталогСохраненияОС);

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/about.html"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос, ""/some/path/about.html"");";
	ПрограммныйКод = СтрЗаменить(ПрограммныйКод, "/some/path/", КаталогСохраненияОС + ПолучитьРазделительПути());

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПрокси() Экспорт

	КонсольнаяКоманда = "curl http://example.com --proxy http://proxy.example:1088";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1088, , , Ложь);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьИнициализациюПроксиТолькоОдинРаз() Экспорт

	КонсольнаяКоманда = "curl http://example1.com http://example2.com --proxy http://proxy.example:1088";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1088, , , Ложь);
	|
	|// Запрос 1. http://example1.com
	|Соединение = Новый HTTPСоединение(""example1.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);
	|
	|// Запрос 2. http://example2.com
	|Соединение = Новый HTTPСоединение(""example2.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьАутентификациюПроксиBasic() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--proxy http://proxy.example \
	|	--proxy-user user:secret";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1080, ""user"", ""secret"", Ложь);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьАутентификациюПроксиNTLM() Экспорт

	КонсольнаяКоманда = "curl http://example.com \
	|	--proxy http://proxy.example \
	|   --proxy-ntlm";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""http"", ""proxy.example"", 1080);
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80, , , Прокси);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыбрасываниеИсключенияКогдаПроксиПротоколНеПоддерживается() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --proxy socks5h://proxy.example";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();

	Параметры = Новый Массив;
	Параметры.Добавить(КонсольнаяКоманда);
	Параметры.Добавить(Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(КонвертерКомандыCURL)
           .Метод("Конвертировать", Параметры)
           .ВыбрасываетИсключение("Прокси протокол socks5h не поддерживается");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьТаймаут() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --max-time 20 --connect-timeout 5.5";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80, , , , 25.5);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтсутствиеТаймаутаЕслиНеУстановленыОбаТаймаута() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --max-time 20 --connect-timeout 0";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуJsonИзФайлов() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' --json @path-to-file1 --json @path-to-file2";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file1"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file2"");
	|ТекстовыеДанныеИзФайла_2 = ТекстовыйДокумент.ПолучитьТекст();
	|
	|ТелоЗапроса = ТекстовыеДанныеИзФайла_1
	|	+ ТекстовыеДанныеИзФайла_2;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуJsonИзСтроки() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' --json '{""drink"": ""coffe""}'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(""{""""drink"""": """"coffe""""}"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуJsonИзНесколькихСтрок() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--json '{""drink"":' \
	|	--json ' ""coffe""}'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(""{""""drink"""": """"coffe""""}"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуJsonИзСтрокиИФайла() Экспорт

	КонсольнаяКоманда = "curl 'http://example.com' \
	|	--json '{""drink"": ""coffe"", ""size"": ' \
	|	--json @path-to-file";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Content-Type"", ""application/json"");
	|Заголовки.Вставить(""Accept"", ""application/json"");
	|
	|ТекстовыйДокумент = Новый ТекстовыйДокумент();
	|ТекстовыйДокумент.Прочитать(""path-to-file"");
	|ТекстовыеДанныеИзФайла_1 = ТекстовыйДокумент.ПолучитьТекст();
	|
	|ТелоЗапроса = ""{""""drink"""": """"coffe"""", """"size"""": ""
	|	+ ТекстовыеДанныеИзФайла_1;
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""POST"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A 'Agent 007'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", ""Agent 007"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПробелыВUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A ' '";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", """");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПустойUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -A ''";

	ПрограммныйКод = "Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"");
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтсутстивиеЗамещенияUserAgent() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ -H 'User-Agent: Agent 007' -A 'Agent 001'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""User-Agent"", ""Agent 007"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьBearerToken() Экспорт

	КонсольнаяКоманда = "curl http://example.com/ --oauth2-bearer 'mF_9.B5f-4.1JqM'";

	ПрограммныйКод = "Заголовки = Новый Соответствие();
	|Заголовки.Вставить(""Authorization"", ""Bearer mF_9.B5f-4.1JqM"");
	|
	|Соединение = Новый HTTPСоединение(""example.com"", 80);
	|HTTPЗапрос = Новый HTTPЗапрос(""/"", Заголовки);
	|
	|HTTPОтвет = Соединение.ВызватьHTTPМетод(""GET"", HTTPЗапрос);";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПоFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеПоFTPS() Экспорт

	КонсольнаяКоманда = "curl ftps://ftp.example.com/file.txt";

	ПрограммныйКод = "ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	|
	|Соединение = Новый FTPСоединение(""ftp.example.com"", 990, , , , Истина, , ЗащищенноеСоединение);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПередачуПользователяFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --user user:secret";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, ""user"", ""secret"", , Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПроксиFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --proxy ftp://proxy.example.com:21";

	ПрограммныйКод = "Прокси = Новый ИнтернетПрокси();
	|Прокси.Установить(""ftp"", ""proxy.example.com"", 21, , , Ложь);
	|
	|Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , Прокси, Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПассивныйРежимСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-pasv";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21, , , , Истина);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьАктивныйРежимСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-port -";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПредупреждениеИгнорированиеАдресаОбратногоСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-port 1.1.1.1";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	Ошибки = Неопределено;

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С(), Ошибки);

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	Ожидаем.Что(Ошибки).Заполнено();
	Ожидаем.Что(Ошибки[0].Текст).Равно("Адрес из опции -P, --ftp-port было проигнорировано");
	Ожидаем.Что(Ошибки[0].Критичная).ЭтоЛожь();

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОдновременнуюПередачуАктивногоИПассивногоРежимаСоединенияFTP() Экспорт

	КонсольнаяКоманда = "curl ftp://ftp.example.com/file.txt --ftp-pasv --ftp-port -";

	ПрограммныйКод = "Соединение = Новый FTPСоединение(""ftp.example.com"", 21);
	|
	|Соединение.Получить(""/file.txt"", ""path/to/file"");";

	КонвертерКомандыCURL = Новый КонвертерКомандыCURL();
	Результат = КонвертерКомандыCURL.Конвертировать(КонсольнаяКоманда, Новый ГенераторПрограммногоКода1С());

	Ожидаем.Что(Результат).Равно(ПрограммныйКод);
	
КонецПроцедуры